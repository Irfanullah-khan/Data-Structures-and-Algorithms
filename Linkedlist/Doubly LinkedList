
package doubly_linkedlist;
import java.util.Scanner;

public class Doubly_LinkedList {

    class Node {
    int data;
    Node next;
    Node prev;

    public Node(int data) {
        this.data = data;
    }
}
    Node head;
    int size;

    Scanner sc = new Scanner(System.in);

    public void addFirst() {
        System.out.print("Enter value to add at beginning: ");
        int data = sc.nextInt();

        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
        size++;
    }

    public void addLast() {
        System.out.print("Enter value to add at end: ");
        int data = sc.nextInt();

        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;

            while (temp.next != null) {
                temp = temp.next;
            }

            temp.next = newNode;
            newNode.prev = temp;
        }
        size++;
    }

    public void addBeforeANode() {
        System.out.print("Enter target node data to insert before: ");
        int target = sc.nextInt();
        System.out.print("Enter value to insert before target: ");
        int data = sc.nextInt();

        Node newNode = new Node(data);

        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;

        if (temp.data == target) {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
            size++;
            return;
        }

        while (temp != null && temp.data != target) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Target not found.");
            return;
        }

        newNode.prev = temp.prev;
        newNode.next = temp;
        temp.prev.next = newNode;
        temp.prev = newNode;
        size++;
    }

    public void addAfterANode() {
        System.out.print("Enter target node data to insert after: ");
        int target = sc.nextInt();
        System.out.print("Enter value to insert after target: ");
        int data = sc.nextInt();

        Node newNode = new Node(data);

        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;

        while (temp != null && temp.data != target) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Target not found.");
            return;
        }

        newNode.next = temp.next;
        if (temp.next != null)
            temp.next.prev = newNode;
        temp.next = newNode;
        newNode.prev = temp;

        size++;
    }

    public void deleteNode() {
        System.out.print("Enter value of node to delete: ");
        int target = sc.nextInt();

        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node temp = head;

        if (temp.data == target) {
            System.out.println("Deleting node: " + temp.data);
            head = temp.next;
            if (head != null) head.prev = null;
            size--;
            return;
        }

        while (temp != null && temp.data != target) {
            temp = temp.next;
        }

        if (temp == null) {
            System.out.println("Node not found.");
            return;
        }

        System.out.println("Deleting node: " + temp.data);

        if (temp.next != null)
            temp.next.prev = temp.prev;

        if (temp.prev != null)
            temp.prev.next = temp.next;

        size--;
    }

    public void displayFromHead() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node curNode = head;
        System.out.print("Head -> ");
        while (curNode != null) {
            System.out.print(curNode.data + " <-> ");
            curNode = curNode.next;
        }
        System.out.println("null");
    }

    public void displayFromTail() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node curNode = head;
        while (curNode.next != null) {
            curNode = curNode.next;
        }

        System.out.print("Tail -> ");
        while (curNode != null) {
            System.out.print(curNode.data + " <-> ");
            curNode = curNode.prev;
        }
        System.out.println("null");
    }

    public void showSize() {
        System.out.println("Size of linked list is: " + size);
    }

    public static void main(String[] args) {
        Doubly_LinkedList list = new Doubly_LinkedList();
        Scanner sc = new Scanner(System.in);

        int choice;

        do {
            System.out.println("\n--- Doubly Linked List Menu ---");
            System.out.println("1. Add First");
            System.out.println("2. Add Last");
            System.out.println("3. Add Before a Node");
            System.out.println("4. Add After a Node");
            System.out.println("5. Delete a Node");
            System.out.println("6. Display From Head");
            System.out.println("7. Display From Tail");
            System.out.println("8. Show Size");
            System.out.println("9. Exit");
            System.out.print("Enter your choice: ");

            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    list.addFirst();
                    break;
                case 2:
                    list.addLast();
                    break;
                case 3:
                    list.addBeforeANode();
                    break;
                case 4:
                    list.addAfterANode();
                    break;
                case 5:
                    list.deleteNode();
                    break;
                case 6:
                    list.displayFromHead();
                    break;
                case 7:
                    list.displayFromTail();
                    break;
                case 8:
                    list.showSize();
                    break;
                case 9:
                    System.out.println("Exiting program.");
                    break;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 9);
        sc.close();
    }
}
